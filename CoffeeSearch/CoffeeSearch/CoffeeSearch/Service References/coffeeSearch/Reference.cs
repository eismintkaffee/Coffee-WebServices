//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoffeeSearch.coffeeSearch {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="coffeeInfo", Namespace="http://schemas.datacontract.org/2004/07/CoffeeSearch")]
    [System.SerializableAttribute()]
    public partial class coffeeInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CaloriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Calories {
            get {
                return this.CaloriesField;
            }
            set {
                if ((this.CaloriesField.Equals(value) != true)) {
                    this.CaloriesField = value;
                    this.RaisePropertyChanged("Calories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="coffeeSearch.ICoffeeSearch")]
    public interface ICoffeeSearch {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/coffeeSearch", ReplyAction="http://tempuri.org/ICoffeeSearch/coffeeSearchResponse")]
        string coffeeSearch(string getSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/coffeeSearch", ReplyAction="http://tempuri.org/ICoffeeSearch/coffeeSearchResponse")]
        System.Threading.Tasks.Task<string> coffeeSearchAsync(string getSearch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/theStringList", ReplyAction="http://tempuri.org/ICoffeeSearch/theStringListResponse")]
        string theStringList(CoffeeSearch.coffeeSearch.coffeeInfo[] cList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/theStringList", ReplyAction="http://tempuri.org/ICoffeeSearch/theStringListResponse")]
        System.Threading.Tasks.Task<string> theStringListAsync(CoffeeSearch.coffeeSearch.coffeeInfo[] cList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/theList", ReplyAction="http://tempuri.org/ICoffeeSearch/theListResponse")]
        string theList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/theList", ReplyAction="http://tempuri.org/ICoffeeSearch/theListResponse")]
        System.Threading.Tasks.Task<string> theListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/maketheList", ReplyAction="http://tempuri.org/ICoffeeSearch/maketheListResponse")]
        CoffeeSearch.coffeeSearch.coffeeInfo[] maketheList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoffeeSearch/maketheList", ReplyAction="http://tempuri.org/ICoffeeSearch/maketheListResponse")]
        System.Threading.Tasks.Task<CoffeeSearch.coffeeSearch.coffeeInfo[]> maketheListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoffeeSearchChannel : CoffeeSearch.coffeeSearch.ICoffeeSearch, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoffeeSearchClient : System.ServiceModel.ClientBase<CoffeeSearch.coffeeSearch.ICoffeeSearch>, CoffeeSearch.coffeeSearch.ICoffeeSearch {
        
        public CoffeeSearchClient() {
        }
        
        public CoffeeSearchClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CoffeeSearchClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoffeeSearchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoffeeSearchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string coffeeSearch(string getSearch) {
            return base.Channel.coffeeSearch(getSearch);
        }
        
        public System.Threading.Tasks.Task<string> coffeeSearchAsync(string getSearch) {
            return base.Channel.coffeeSearchAsync(getSearch);
        }
        
        public string theStringList(CoffeeSearch.coffeeSearch.coffeeInfo[] cList) {
            return base.Channel.theStringList(cList);
        }
        
        public System.Threading.Tasks.Task<string> theStringListAsync(CoffeeSearch.coffeeSearch.coffeeInfo[] cList) {
            return base.Channel.theStringListAsync(cList);
        }
        
        public string theList() {
            return base.Channel.theList();
        }
        
        public System.Threading.Tasks.Task<string> theListAsync() {
            return base.Channel.theListAsync();
        }
        
        public CoffeeSearch.coffeeSearch.coffeeInfo[] maketheList() {
            return base.Channel.maketheList();
        }
        
        public System.Threading.Tasks.Task<CoffeeSearch.coffeeSearch.coffeeInfo[]> maketheListAsync() {
            return base.Channel.maketheListAsync();
        }
    }
}
